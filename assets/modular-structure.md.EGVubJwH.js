import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.oSdz25v6.js";const o=JSON.parse('{"title":"Estructura Modular","description":"","frontmatter":{},"headers":[],"relativePath":"modular-structure.md","filePath":"modular-structure.md"}'),l={name:"modular-structure.md"};function t(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<p>Por: <a href="https://github.com/ecanquiz" target="_blank" rel="noreferrer">Ernesto Canquiz</a></p><h1 id="estructura-modular" tabindex="-1">Estructura Modular <a class="header-anchor" href="#estructura-modular" aria-label="Permalink to &quot;Estructura Modular&quot;">​</a></h1><p>Con el inevitable crecimiento del proyecto, es recomendable adoptar una <strong>estructura modular</strong> para las carpetas.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──modules/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──moduleA/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──router/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──services/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──stores/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──types/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> views/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──ModuleB/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └──ModuleC/</span></span></code></pre></div><blockquote><p>Una <strong>estructura modular</strong> organiza el proyecto en módulos independientes, cada uno con su propia base de código. Esto facilita la gestión y organización del programa.</p></blockquote><h2 id="ejemplo-real" tabindex="-1">Ejemplo Real <a class="header-anchor" href="#ejemplo-real" aria-label="Permalink to &quot;Ejemplo Real&quot;">​</a></h2><p>Imaginemos que organizamos nuestro código en dos módulos, separando la lógica de <strong>autenticación</strong> del CRUD de <strong>usuarios</strong>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──assets/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──layouts/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──middleware/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──types/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──utils/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──modules/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Auth/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──routes/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──services/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──store/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──types/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──views/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Dashboard.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Home.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Login.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Profile.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     └──Register.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──User/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──routes/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──services/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──store/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──types/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──views/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Datagrid.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     └──CreateOrEdit.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──tests/</span></span></code></pre></div><p>Esta organización permite visualizar claramente la ubicación de los archivos según su funcionalidad, separando la estructura del código en módulos.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Es importante mencionar que, si bien se puede crear una carpeta <code>tests/</code> para los archivos de prueba, existen objeciones a esta práctica. Muchos desarrolladores están prefiriendo crear carpetas dentro de <code>src/</code>, como <code>__tests__/</code> o <code>__mocks__/</code>, tema que se abordará <a href="./tests.html">más adelante</a>.</p></div><h2 id="codigo-generico" tabindex="-1">Código Genérico <a class="header-anchor" href="#codigo-generico" aria-label="Permalink to &quot;Código Genérico&quot;">​</a></h2><blockquote><p>Aún hay una parte de nuestro código que permanece desagrupada: el <strong>código genérico</strong> reutilizable, que se importa en múltiples casos de uso.</p></blockquote><p>Para organizarlo, podemos crear una carpeta al mismo nivel que <code>modules/</code>, denominada <code>core/</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──core/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──assets/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──middleware/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──router/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──types/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──utils/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──modules/</span></span></code></pre></div><blockquote><p>Siéntase libre de nombrar esta carpeta como prefiera usted o su equipo de desarrollo, por ejemplo, <code>main/</code>, <code>base/</code>, <code>central/</code>, <code>general/</code>, etc. Recuerde: <em>&quot;Las distintas denominaciones son cuestiones de forma más no de fondo&quot;</em>. Es recomendable consultar estas convenciones con su equipo de desarrollo.</p></blockquote><h2 id="codigo-organizado" tabindex="-1">Código Organizado <a class="header-anchor" href="#codigo-organizado" aria-label="Permalink to &quot;Código Organizado&quot;">​</a></h2><p>Con esta estructura, nuestro código se ve mucho más organizado:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──core/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──modules/</span></span></code></pre></div><h2 id="ok-pero-surge-una-pregunta" tabindex="-1">Ok pero, surge una pregunta <a class="header-anchor" href="#ok-pero-surge-una-pregunta" aria-label="Permalink to &quot;Ok pero, surge una pregunta&quot;">​</a></h2><blockquote><p><strong>¿Es la estructura modular una práctica suficiente para eliminar toda la complejidad de organizar tantos archivos, facilitando el desarrollo, la depuración, el mantenimiento y la escalabilidad del proyecto?</strong></p></blockquote>`,20)]))}const c=i(l,[["render",t]]);export{o as __pageData,c as default};
