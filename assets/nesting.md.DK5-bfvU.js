import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.oSdz25v6.js";const F=JSON.parse('{"title":"Anidamiento","description":"","frontmatter":{},"headers":[],"relativePath":"nesting.md","filePath":"nesting.md"}'),l={name:"nesting.md"};function h(p,s,t,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<p>Por: <a href="https://github.com/ecanquiz" target="_blank" rel="noreferrer">Ernesto Canquiz</a></p><h1 id="anidamiento" tabindex="-1">Anidamiento <a class="header-anchor" href="#anidamiento" aria-label="Permalink to &quot;Anidamiento&quot;">​</a></h1><blockquote><p>En este apartado exploraremos una técnica estructural de <strong>anidamiento de carpetas</strong> de componentes y componibles.</p></blockquote><h2 id="cuando-el-componente-foo-vue-empieza-a-crecer" tabindex="-1">Cuando el componente <code>Foo.vue</code> empieza a crecer <a class="header-anchor" href="#cuando-el-componente-foo-vue-empieza-a-crecer" aria-label="Permalink to &quot;Cuando el componente \`Foo.vue\` empieza a crecer&quot;">​</a></h2><p>Supongamos que necesitamos refactorizar la vista <code>Foo.vue</code> porque el código fuente está empezando a crecer.</p><blockquote><p>Crearemos un componente hijo que llamaremos <code>Children.vue</code> para desacoplar parte del código. Dicho componente no es reutilizable, ya que solo es de utilidad para el componente padre <code>Foo.vue</code>.</p></blockquote><p>Igualmente, como buena práctica, creamos el componible <code>useFoo.ts</code> para separar la regla de negocio de la interfaz gráfica.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──views/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Foo/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──Children.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──Index.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──useFoo.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Bar.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └──Baz.vue</span></span></code></pre></div><p>Tanto el componente <code>Children.vue</code> como el composable <code>useFoo.ts</code> pertenecen únicamente a la carpeta <code>./src/views/Foo/</code>, por lo que no tiene sentido separarlos en carpetas distintas.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Tenga en cuenta que desde ahora <code>./src/views/Foo.vue</code> será llamado <code>./src/views/Foo/Index.vue</code>. Por lo tanto, este cambio debe ser actualizado en el archivo <code>./src/router/index.ts</code>.</p></div><h2 id="foo-index-vue-continua-aumentando" tabindex="-1"><code>Foo/Index.vue</code> continúa aumentando <a class="header-anchor" href="#foo-index-vue-continua-aumentando" aria-label="Permalink to &quot;\`Foo/Index.vue\` continúa aumentando&quot;">​</a></h2><p>Ahora, el componente padre necesita más componentes y componibles hijos. Estos solo son utiles para <code>.src/views/Foo/Index.vue</code>.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──views/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Foo/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──Children.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──ChildrenAnother.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──ChildrenAnotherOne.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──Index.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──useFoo.ts</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──useFooAnother.ts</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──useFooAnotherOne.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Bar.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └──Baz.vue</span></span></code></pre></div><p>Entonces, ¿qué le parece si a continuación organizamos un poco más la estructura?</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──views/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Foo/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──Children.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──ChildrenAnother.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──ChildrenAnotherOne.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──useFoo.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──useFooAnother.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──useFooAnotherOne.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──Index.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Bar.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └──Baz.vue</span></span></code></pre></div><p>Así lucirá desde afuera.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──views/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Foo/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──index.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Bar.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └──Baz.vue</span></span></code></pre></div><blockquote><p>¡Genial! Ahora tenemos una estructura más organizada.</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──views/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Foo/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──Bar.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └──Baz.vue</span></span></code></pre></div><h2 id="estructura-clasica" tabindex="-1">Estructura Clásica <a class="header-anchor" href="#estructura-clasica" aria-label="Permalink to &quot;Estructura Clásica&quot;">​</a></h2><p>La estructura clásica de un proyecto Vue.js es la siguiente:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──components/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──composables/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──views/</span></span></code></pre></div><blockquote><p>Pero, ¿qué sentido le daremos ahora a las archiconocidas carpetas <code>./src/components</code> y <code>./src/composables</code>?</p></blockquote><h2 id="codigo-reutilizable-globalmente" tabindex="-1">Código Reutilizable Globalmente <a class="header-anchor" href="#codigo-reutilizable-globalmente" aria-label="Permalink to &quot;Código Reutilizable Globalmente&quot;">​</a></h2><p>En las carpetas <code>./src/components</code> y <code>./src/composables</code> colocaremos, respectivamente, solo los componentes y componibles que pueden ser reutilizados por cualquiera de las vistas.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──components/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──GlobalReusable/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──Children.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──ChildrenOther.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──Index.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──GlobalReusableOther.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──composables/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──useGlobalReusable.ts</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──useGlobalReusableOther.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──router/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──views/</span></span></code></pre></div><blockquote><p>Tenga en cuenta que el componente principal <code>./src/components/GlobalReusable/Index.vue</code> posee dos componentes secundarios:</p></blockquote><blockquote><ul><li><code>./src/components/GlobalReusable/Children.vue</code></li><li><code>./src/components/GlobalReusable/ChildrenOther.vue</code></li></ul></blockquote><blockquote><p>Estos dos componentes hijos solo tendrán sentido dentro de su componente padre.</p></blockquote><h2 id="un-paso-mas-alla" tabindex="-1">Un Paso Más Allá <a class="header-anchor" href="#un-paso-mas-alla" aria-label="Permalink to &quot;Un Paso Más Allá&quot;">​</a></h2><blockquote><p>Ahora que hemos llegado aquí, usted se preguntará:</p><p><strong>¿Cómo quedará todo esto con la estructura modular?</strong>.</p></blockquote><p>Echemos un vistazo a la siguiente estructura:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ├──core/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──GlobalReusable/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──GlobalReusableOther.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──useGlobalReusable.ts</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──useGlobalReusableOther.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──router/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   └──modules/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──ModuleA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ├──ModuleB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──components/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──OnlyReusableByModuleB/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──Children.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──Index.vue</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──OnlyReusableByModuleBOther.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──composables/</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──useOnlyReusableByModuleB.ts</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──useOnlyReusableByModuleBOther.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ├──routes/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  └──views/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Foo/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     ├──Bar.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     └──Baz.vue</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      └──ModuleC</span></span></code></pre></div><blockquote><p><strong>Este enfoque modular y anidado proporciona una base sólida para el desarrollo de aplicaciones Vue.</strong></p></blockquote><blockquote><p>Al mantener los componentes y componibles secundarios dentro de sus respectivos componentes y componibles principales, se establece una exclusividad clara y se fomenta la reutilización de aquellos que son globales.</p></blockquote>`,35)]))}const c=i(l,[["render",h]]);export{F as __pageData,c as default};
